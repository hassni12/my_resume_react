var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

export default function extractUsedProps(rule) {
  var handler = function handler(props) {
    return {
      get: function get(target, key) {
        if (_typeof(target[key]) === 'object' && target[key] !== null) {
          props.push(key);
          return target[key];
        }
        props.push(key);
        return target[key];
      }
    };
  };

  var usedProps = [];
  var proxy = new Proxy({ theme: {} }, handler(usedProps));
  rule(proxy);
  return usedProps;
}