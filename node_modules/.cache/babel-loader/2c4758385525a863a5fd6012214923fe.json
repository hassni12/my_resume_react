{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\"; // src/checkbox-group.tsx\n\nimport { useMemo } from \"react\"; // src/checkbox-context.ts\n\nimport { createContext } from \"@chakra-ui/react-context\";\n\nvar _createContext = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    CheckboxGroupProvider = _createContext2[0],\n    useCheckboxGroupContext = _createContext2[1]; // src/use-checkbox-group.ts\n\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"; // ../../utilities/shared-utils/src/index.ts\n\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \");\n\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n}\n\nvar dataAttr = condition => condition ? \"\" : void 0;\n\nfunction callAllHandlers(...fns) {\n  return function func(event) {\n    fns.some(fn => {\n      fn == null ? void 0 : fn(event);\n      return event == null ? void 0 : event.defaultPrevented;\n    });\n  };\n}\n\nfunction callAll(...fns) {\n  return function mergedFn(arg) {\n    fns.forEach(fn => {\n      fn == null ? void 0 : fn(arg);\n    });\n  };\n} // src/use-checkbox-group.ts\n\n\nimport { useCallback } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useCheckboxGroup(props = {}) {\n  const defaultValue = props.defaultValue,\n        valueProp = props.value,\n        onChange = props.onChange,\n        isDisabled = props.isDisabled,\n        isNative = props.isNative;\n  const onChangeProp = useCallbackRef(onChange);\n\n  const _useControllableState = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  }),\n        _useControllableState2 = _slicedToArray(_useControllableState, 2),\n        value = _useControllableState2[0],\n        setValue = _useControllableState2[1];\n\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback((props2 = {}) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n} // src/checkbox-group.tsx\n\n\nfunction CheckboxGroup(props) {\n  const colorScheme = props.colorScheme,\n        size = props.size,\n        variant = props.variant,\n        children = props.children,\n        isDisabled = props.isDisabled;\n\n  const _useCheckboxGroup = useCheckboxGroup(props),\n        value = _useCheckboxGroup.value,\n        onChange = _useCheckboxGroup.onChange;\n\n  const group = useMemo(() => ({\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant,\n    isDisabled\n  }), [size, onChange, colorScheme, value, variant, isDisabled]);\n  return (\n    /* @__PURE__ */\n    React.createElement(CheckboxGroupProvider, {\n      value: group,\n      children\n    })\n  );\n}\n\nCheckboxGroup.displayName = \"CheckboxGroup\"; // src/checkbox-icon.tsx\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nvar MotionSvg = chakra(motion.svg);\n\nfunction CheckIcon(props) {\n  return (\n    /* @__PURE__ */\n    React.createElement(MotionSvg, {\n      width: \"1.2em\",\n      viewBox: \"0 0 12 10\",\n      variants: {\n        unchecked: {\n          opacity: 0,\n          strokeDashoffset: 16\n        },\n        checked: {\n          opacity: 1,\n          strokeDashoffset: 0,\n          transition: {\n            duration: 0.2\n          }\n        }\n      },\n      style: {\n        fill: \"none\",\n        strokeWidth: 2,\n        stroke: \"currentColor\",\n        strokeDasharray: 16\n      },\n      ...props\n    },\n    /* @__PURE__ */\n    React.createElement(\"polyline\", {\n      points: \"1.5 6 4.5 9 10.5 1\"\n    }))\n  );\n}\n\nfunction IndeterminateIcon(props) {\n  return (\n    /* @__PURE__ */\n    React.createElement(MotionSvg, {\n      width: \"1.2em\",\n      viewBox: \"0 0 24 24\",\n      variants: {\n        unchecked: {\n          scaleX: 0.65,\n          opacity: 0\n        },\n        checked: {\n          scaleX: 1,\n          opacity: 1,\n          transition: {\n            scaleX: {\n              duration: 0\n            },\n            opacity: {\n              duration: 0.02\n            }\n          }\n        }\n      },\n      style: {\n        stroke: \"currentColor\",\n        strokeWidth: 4\n      },\n      ...props\n    },\n    /* @__PURE__ */\n    React.createElement(\"line\", {\n      x1: \"21\",\n      x2: \"3\",\n      y1: \"12\",\n      y2: \"12\"\n    }))\n  );\n}\n\nfunction CheckboxTransition({\n  open,\n  children\n}) {\n  return (\n    /* @__PURE__ */\n    React.createElement(AnimatePresence, {\n      initial: false\n    }, open &&\n    /* @__PURE__ */\n    React.createElement(motion.div, {\n      variants: {\n        unchecked: {\n          scale: 0.5\n        },\n        checked: {\n          scale: 1\n        }\n      },\n      initial: \"unchecked\",\n      animate: \"checked\",\n      exit: \"unchecked\",\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\"\n      }\n    }, children))\n  );\n}\n\nfunction CheckboxIcon(props) {\n  const isIndeterminate = props.isIndeterminate,\n        isChecked = props.isChecked,\n        rest = _objectWithoutProperties(props, [\"isIndeterminate\", \"isChecked\"]);\n\n  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;\n  return (\n    /* @__PURE__ */\n    React.createElement(CheckboxTransition, {\n      open: isChecked || isIndeterminate\n    },\n    /* @__PURE__ */\n    React.createElement(BaseIcon, { ...rest\n    }))\n  );\n} // src/checkbox.tsx\n\n\nimport { chakra as chakra2, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo as useMemo2 } from \"react\"; // src/use-checkbox.ts\n\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef as useCallbackRef2 } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"; // ../../utilities/object-utils/src/index.ts\n\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) delete clone[key];\n  }\n\n  return clone;\n} // src/use-checkbox.ts\n\n\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback as useCallback2, useEffect, useRef, useState } from \"react\";\n\nfunction useCheckbox(props = {}) {\n  const formControlProps = useFormControlProps(props);\n  const isDisabled = formControlProps.isDisabled,\n        isReadOnly = formControlProps.isReadOnly,\n        isRequired = formControlProps.isRequired,\n        isInvalid = formControlProps.isInvalid,\n        id = formControlProps.id,\n        onBlur = formControlProps.onBlur,\n        onFocus = formControlProps.onFocus,\n        ariaDescribedBy = formControlProps[\"aria-describedby\"];\n\n  const defaultChecked = props.defaultChecked,\n        checkedProp = props.isChecked,\n        isFocusable = props.isFocusable,\n        onChange = props.onChange,\n        isIndeterminate = props.isIndeterminate,\n        name = props.name,\n        value = props.value,\n        _props$tabIndex = props.tabIndex,\n        tabIndex = _props$tabIndex === void 0 ? void 0 : _props$tabIndex,\n        ariaLabel = props[\"aria-label\"],\n        ariaLabelledBy = props[\"aria-labelledby\"],\n        ariaInvalid = props[\"aria-invalid\"],\n        rest = _objectWithoutProperties(props, [\"defaultChecked\", \"isChecked\", \"isFocusable\", \"onChange\", \"isIndeterminate\", \"name\", \"value\", \"tabIndex\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\"]);\n\n  const htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  const onChangeProp = useCallbackRef2(onChange);\n  const onBlurProp = useCallbackRef2(onBlur);\n  const onFocusProp = useCallbackRef2(onFocus);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isFocusVisible = _useState2[0],\n        setIsFocusVisible = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isFocused = _useState4[0],\n        setFocused = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isHovered = _useState6[0],\n        setHovered = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isActive = _useState8[0],\n        setActive = _useState8[1];\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const inputRef = useRef(null);\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        rootIsLabelElement = _useState10[0],\n        setRootIsLabelElement = _useState10[1];\n\n  const _useState11 = useState(!!defaultChecked),\n        _useState12 = _slicedToArray(_useState11, 2),\n        checkedState = _useState12[0],\n        setCheckedState = _useState12[1];\n\n  const isControlled = checkedProp !== void 0;\n  const isChecked = isControlled ? checkedProp : checkedState;\n  const handleChange = useCallback2(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n\n    el.form.onreset = () => {\n      setCheckedState(!!defaultChecked);\n    };\n  }, []);\n  const trulyDisabled = isDisabled && !isFocusable;\n  const onKeyDown = useCallback2(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback2(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  const getCheckboxProps = useCallback2((props2 = {}, forwardedRef = null) => {\n    const onPressDown = event => {\n      if (isFocused) {\n        event.preventDefault();\n      }\n\n      setActive(true);\n    };\n\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovered(false))\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getRootProps = useCallback2((props2 = {}, forwardedRef = null) => ({ ...htmlProps,\n    ...props2,\n    ref: mergeRefs(forwardedRef, node => {\n      if (!node) return;\n      setRootIsLabelElement(node.tagName === \"LABEL\");\n    }),\n    onClick: callAllHandlers(props2.onClick, () => {\n      var _a;\n\n      if (!rootIsLabelElement) {\n        (_a = inputRef.current) == null ? void 0 : _a.click();\n        requestAnimationFrame(() => {\n          var _a2;\n\n          (_a2 = inputRef.current) == null ? void 0 : _a2.focus();\n        });\n      }\n    }),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid)\n  }), [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  const getInputProps = useCallback2((props2 = {}, forwardedRef = null) => {\n    return { ...props2,\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, () => setFocused(false)),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    };\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  const getLabelProps = useCallback2((props2 = {}, forwardedRef = null) => ({ ...props2,\n    ref: forwardedRef,\n    onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n    onTouchStart: callAllHandlers(props2.onTouchStart, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid)\n  }), [isChecked, isDisabled, isInvalid]);\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n} // src/checkbox.tsx\n\n\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group,\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n\n  const _ownProps$spacing = ownProps.spacing,\n        spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n        className = ownProps.className,\n        children = ownProps.children,\n        iconColor = ownProps.iconColor,\n        iconSize = ownProps.iconSize,\n        _ownProps$icon = ownProps.icon,\n        icon = _ownProps$icon === void 0 ?\n  /* @__PURE__ */\n  React.createElement(CheckboxIcon, null) : _ownProps$icon,\n        isCheckedProp = ownProps.isChecked,\n        _ownProps$isDisabled = ownProps.isDisabled,\n        isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n        onChangeProp = ownProps.onChange,\n        inputProps = ownProps.inputProps,\n        rest = _objectWithoutProperties(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\", \"inputProps\"]);\n\n  let isChecked = isCheckedProp;\n\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  let onChange = onChangeProp;\n\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  const _useCheckbox = useCheckbox({ ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  }),\n        state = _useCheckbox.state,\n        getInputProps = _useCheckbox.getInputProps,\n        getCheckboxProps = _useCheckbox.getCheckboxProps,\n        getLabelProps = _useCheckbox.getLabelProps,\n        getRootProps = _useCheckbox.getRootProps;\n\n  const iconStyles = useMemo2(() => ({\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon\n  }), [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra2.label, {\n      __css: { ...rootStyles,\n        ...styles.container\n      },\n      className: cx(\"chakra-checkbox\", className),\n      ...getRootProps()\n    },\n    /* @__PURE__ */\n    React.createElement(\"input\", {\n      className: \"chakra-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }),\n    /* @__PURE__ */\n    React.createElement(chakra2.span, {\n      __css: { ...controlStyles,\n        ...styles.control\n      },\n      className: \"chakra-checkbox__control\",\n      ...getCheckboxProps()\n    }, clonedIcon), children &&\n    /* @__PURE__ */\n    React.createElement(chakra2.span, {\n      className: \"chakra-checkbox__label\",\n      ...getLabelProps(),\n      __css: {\n        marginStart: spacing,\n        ...styles.label\n      }\n    }, children))\n  );\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox, CheckboxGroup, CheckboxIcon, useCheckbox, useCheckboxGroup };","map":null,"metadata":{},"sourceType":"module"}