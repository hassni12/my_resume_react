{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _throttle = _interopRequireDefault(require(\"./throttle\"));\n\nfunction isEqualArray(a, b) {\n  return a.length === b.length && a.every(function (item, index) {\n    return item === b[index];\n  });\n}\n\nvar Scrollspy =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Scrollspy, _React$Component);\n  (0, _createClass2.default)(Scrollspy, null, [{\n    key: \"propTypes\",\n    get: function get() {\n      return {\n        items: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,\n        currentClassName: _propTypes.default.string.isRequired,\n        scrolledPastClassName: _propTypes.default.string,\n        style: _propTypes.default.object,\n        componentTag: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.element]),\n        offset: _propTypes.default.number,\n        rootEl: _propTypes.default.string,\n        onUpdate: _propTypes.default.func\n      };\n    }\n  }, {\n    key: \"defaultProps\",\n    get: function get() {\n      return {\n        items: [],\n        currentClassName: '',\n        style: {},\n        componentTag: 'ul',\n        offset: 0,\n        onUpdate: function onUpdate() {}\n      };\n    }\n  }]);\n\n  function Scrollspy(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Scrollspy);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Scrollspy).call(this, props));\n    _this.state = {\n      targetItems: [],\n      inViewState: [],\n      isScrolledPast: [] // manually bind as ES6 does not apply this\n      // auto binding as React.createClass does\n\n    };\n    _this._handleSpy = _this._handleSpy.bind((0, _assertThisInitialized2.default)(_this));\n    return _this;\n  }\n\n  (0, _createClass2.default)(Scrollspy, [{\n    key: \"_initSpyTarget\",\n    value: function _initSpyTarget(items) {\n      var targetItems = items.map(function (item) {\n        return document.getElementById(item);\n      });\n      return targetItems;\n    } // https://github.com/makotot/react-scrollspy/pull/45\n\n  }, {\n    key: \"_fillArray\",\n    value: function _fillArray(array, val) {\n      var newArray = [];\n\n      for (var i = 0, max = array.length; i < max; i++) {\n        newArray[i] = val;\n      }\n\n      return newArray;\n    }\n  }, {\n    key: \"_isScrolled\",\n    value: function _isScrolled() {\n      return this._getScrollDimension().scrollTop > 0;\n    }\n  }, {\n    key: \"_getScrollDimension\",\n    value: function _getScrollDimension() {\n      var doc = document;\n      var rootEl = this.props.rootEl;\n      var scrollTop = rootEl ? doc.querySelector(rootEl).scrollTop : doc.documentElement.scrollTop || doc.body.parentNode.scrollTop || doc.body.scrollTop;\n      var scrollHeight = rootEl ? doc.querySelector(rootEl).scrollHeight : doc.documentElement.scrollHeight || doc.body.parentNode.scrollHeight || doc.body.scrollHeight;\n      return {\n        scrollTop: scrollTop,\n        scrollHeight: scrollHeight\n      };\n    }\n  }, {\n    key: \"_getElemsViewState\",\n    value: function _getElemsViewState(targets) {\n      var elemsInView = [];\n      var elemsOutView = [];\n      var viewStatusList = [];\n      var targetItems = targets ? targets : this.state.targetItems;\n      var hasInViewAlready = false;\n\n      for (var i = 0, max = targetItems.length; i < max; i++) {\n        var currentContent = targetItems[i];\n        var isInView = hasInViewAlready ? false : this._isInView(currentContent);\n\n        if (isInView) {\n          hasInViewAlready = true;\n          elemsInView.push(currentContent);\n        } else {\n          elemsOutView.push(currentContent);\n        }\n\n        var isLastItem = i === max - 1;\n\n        var isScrolled = this._isScrolled(); // https://github.com/makotot/react-scrollspy/pull/26#issue-167413769\n\n\n        var isLastShortItemAtBottom = this._isAtBottom() && this._isInView(currentContent) && !isInView && isLastItem && isScrolled;\n\n        if (isLastShortItemAtBottom) {\n          elemsOutView.pop();\n          elemsOutView.push.apply(elemsOutView, (0, _toConsumableArray2.default)(elemsInView));\n          elemsInView = [currentContent];\n          viewStatusList = this._fillArray(viewStatusList, false);\n          isInView = true;\n        }\n\n        viewStatusList.push(isInView);\n      }\n\n      return {\n        inView: elemsInView,\n        outView: elemsOutView,\n        viewStatusList: viewStatusList,\n        scrolledPast: this.props.scrolledPastClassName && this._getScrolledPast(viewStatusList)\n      };\n    }\n  }, {\n    key: \"_isInView\",\n    value: function _isInView(el) {\n      if (!el) {\n        return false;\n      }\n\n      var _this$props = this.props,\n          rootEl = _this$props.rootEl,\n          offset = _this$props.offset;\n      var rootRect;\n\n      if (rootEl) {\n        rootRect = document.querySelector(rootEl).getBoundingClientRect();\n      }\n\n      var rect = el.getBoundingClientRect();\n      var winH = rootEl ? rootRect.height : window.innerHeight;\n\n      var _this$_getScrollDimen = this._getScrollDimension(),\n          scrollTop = _this$_getScrollDimen.scrollTop;\n\n      var scrollBottom = scrollTop + winH;\n      var elTop = rootEl ? rect.top + scrollTop - rootRect.top + offset : rect.top + scrollTop + offset;\n      var elBottom = elTop + el.offsetHeight;\n      return elTop < scrollBottom && elBottom > scrollTop;\n    }\n  }, {\n    key: \"_isAtBottom\",\n    value: function _isAtBottom() {\n      var rootEl = this.props.rootEl;\n\n      var _this$_getScrollDimen2 = this._getScrollDimension(),\n          scrollTop = _this$_getScrollDimen2.scrollTop,\n          scrollHeight = _this$_getScrollDimen2.scrollHeight;\n\n      var winH = rootEl ? document.querySelector(rootEl).getBoundingClientRect().height : window.innerHeight;\n      var scrolledToBottom = scrollTop + winH >= scrollHeight;\n      return scrolledToBottom;\n    }\n  }, {\n    key: \"_getScrolledPast\",\n    value: function _getScrolledPast(viewStatusList) {\n      if (!viewStatusList.some(function (item) {\n        return item;\n      })) {\n        return viewStatusList;\n      }\n\n      var hasFoundInView = false;\n      var scrolledPastItems = viewStatusList.map(function (item) {\n        if (item && !hasFoundInView) {\n          hasFoundInView = true;\n          return false;\n        }\n\n        return !hasFoundInView;\n      });\n      return scrolledPastItems;\n    }\n  }, {\n    key: \"_spy\",\n    value: function _spy(targets) {\n      var _this2 = this;\n\n      var elemensViewState = this._getElemsViewState(targets);\n\n      var currentStatuses = this.state.inViewState;\n      this.setState({\n        inViewState: elemensViewState.viewStatusList,\n        isScrolledPast: elemensViewState.scrolledPast\n      }, function () {\n        _this2._update(currentStatuses);\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(prevStatuses) {\n      if (isEqualArray(this.state.inViewState, prevStatuses)) {\n        return;\n      }\n\n      this.props.onUpdate(this.state.targetItems[this.state.inViewState.indexOf(true)]);\n    }\n  }, {\n    key: \"_handleSpy\",\n    value: function _handleSpy() {\n      (0, _throttle.default)(this._spy(), 100);\n    }\n  }, {\n    key: \"_initFromProps\",\n    value: function _initFromProps() {\n      var targetItems = this._initSpyTarget(this.props.items);\n\n      this.setState({\n        targetItems: targetItems\n      });\n\n      this._spy(targetItems);\n    }\n  }, {\n    key: \"offEvent\",\n    value: function offEvent() {\n      var el = this.props.rootEl ? document.querySelector(this.props.rootEl) : window;\n      el.removeEventListener('scroll', this._handleSpy);\n    }\n  }, {\n    key: \"onEvent\",\n    value: function onEvent() {\n      var el = this.props.rootEl ? document.querySelector(this.props.rootEl) : window;\n      el.addEventListener('scroll', this._handleSpy);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._initFromProps();\n\n      this.onEvent();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.offEvent();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps() {\n      this._initFromProps();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var Tag = this.props.componentTag;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          scrolledPastClassName = _this$props2.scrolledPastClassName,\n          style = _this$props2.style;\n      var counter = 0;\n\n      var items = _react.default.Children.map(children, function (child, idx) {\n        var _classNames;\n\n        if (!child) {\n          return null;\n        }\n\n        var ChildTag = child.type;\n        var isScrolledPast = scrolledPastClassName && _this3.state.isScrolledPast[idx];\n        var childClass = (0, _classnames.default)((_classNames = {}, (0, _defineProperty2.default)(_classNames, \"\".concat(child.props.className), child.props.className), (0, _defineProperty2.default)(_classNames, \"\".concat(_this3.props.currentClassName), _this3.state.inViewState[idx]), (0, _defineProperty2.default)(_classNames, \"\".concat(_this3.props.scrolledPastClassName), isScrolledPast), _classNames));\n        return _react.default.createElement(ChildTag, (0, _extends2.default)({}, child.props, {\n          className: childClass,\n          key: counter++\n        }), child.props.children);\n      });\n\n      var itemClass = (0, _classnames.default)((0, _defineProperty2.default)({}, \"\".concat(className), className));\n      return _react.default.createElement(Tag, {\n        className: itemClass,\n        style: style\n      }, items);\n    }\n  }]);\n  return Scrollspy;\n}(_react.default.Component);\n\nexports.default = Scrollspy;","map":null,"metadata":{},"sourceType":"script"}