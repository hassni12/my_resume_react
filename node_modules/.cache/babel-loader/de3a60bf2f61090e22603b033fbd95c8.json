{"ast":null,"code":"import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n  const style = state.style,\n        vars = state.vars,\n        transform = state.transform,\n        transformKeys = state.transformKeys,\n        transformOrigin = state.transformOrigin;\n  transformKeys.length = 0; // Track whether we encounter any transform or transformOrigin values.\n\n  let hasTransform = false;\n  let hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  let transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n\n  for (const key in latestValues) {\n    const value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    const valueType = numberValueTypes[key];\n    const valueAsType = getValueAsType(value, valueType);\n\n    if (transformProps.has(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key); // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== (valueType.default || 0)) transformIsNone = false;\n    } else if (key.startsWith(\"origin\")) {\n      // If this is a transform origin, flag and enable further transform-origin processing\n      hasTransformOrigin = true;\n      transformOrigin[key] = valueAsType;\n    } else {\n      style[key] = valueAsType;\n    }\n  }\n\n  if (!latestValues.transform) {\n    if (hasTransform || transformTemplate) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    } else if (style.transform) {\n      /**\n       * If we have previously created a transform but currently don't have any,\n       * reset transform style to none.\n       */\n      style.transform = \"none\";\n    }\n  }\n  /**\n   * Build a transformOrigin style. Uses the same defaults as the browser for\n   * undefined origins.\n   */\n\n\n  if (hasTransformOrigin) {\n    const _transformOrigin$orig = transformOrigin.originX,\n          originX = _transformOrigin$orig === void 0 ? \"50%\" : _transformOrigin$orig,\n          _transformOrigin$orig2 = transformOrigin.originY,\n          originY = _transformOrigin$orig2 === void 0 ? \"50%\" : _transformOrigin$orig2,\n          _transformOrigin$orig3 = transformOrigin.originZ,\n          originZ = _transformOrigin$orig3 === void 0 ? 0 : _transformOrigin$orig3;\n    style.transformOrigin = \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n  }\n}\n\nexport { buildHTMLStyles };","map":null,"metadata":{},"sourceType":"module"}