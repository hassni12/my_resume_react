{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n// ../../../react-shim.js\nimport React from \"react\"; // src/skeleton.tsx\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { usePrevious } from \"@chakra-ui/react-use-previous\"; // ../../utilities/shared-utils/src/index.ts\n\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \"); // src/skeleton.tsx\n\n\nimport { useEffect, useRef } from \"react\";\nvar StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\"\n    }\n  }\n});\n\nvar useIsFirstRender = () => {\n  const isFirstRender = useRef(true);\n  useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n  return isFirstRender.current;\n};\n\nvar fade = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar startColor = \"var(--skeleton-start-color)\";\nvar endColor = \"var(--skeleton-end-color)\";\nvar bgFade = keyframes({\n  from: {\n    borderColor: startColor,\n    background: startColor\n  },\n  to: {\n    borderColor: endColor,\n    background: endColor\n  }\n});\nvar Skeleton = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Skeleton\", props);\n  const isFirstRender = useIsFirstRender();\n\n  const _omitThemingProps = omitThemingProps(props),\n        startColor2 = _omitThemingProps.startColor,\n        endColor2 = _omitThemingProps.endColor,\n        isLoaded = _omitThemingProps.isLoaded,\n        fadeDuration = _omitThemingProps.fadeDuration,\n        speed = _omitThemingProps.speed,\n        className = _omitThemingProps.className,\n        rest = _objectWithoutProperties(_omitThemingProps, [\"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"className\"]);\n\n  const wasPreviouslyLoaded = usePrevious(isLoaded);\n\n  const _className = cx(\"chakra-skeleton\", className);\n\n  if (isLoaded) {\n    const animation = isFirstRender || wasPreviouslyLoaded ? \"none\" : \"\".concat(fade, \" \").concat(fadeDuration, \"s\");\n    return (\n      /* @__PURE__ */\n      React.createElement(chakra.div, {\n        ref,\n        className: _className,\n        __css: {\n          animation\n        },\n        ...rest\n      })\n    );\n  }\n\n  return (\n    /* @__PURE__ */\n    React.createElement(StyledSkeleton, {\n      ref,\n      className: _className,\n      ...rest,\n      __css: { ...styles,\n        animation: \"\".concat(speed, \"s linear infinite alternate \").concat(bgFade)\n      }\n    })\n  );\n});\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8\n};\nSkeleton.displayName = \"Skeleton\";\n\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\n\nvar defaultNoOfLines = 3;\n\nvar SkeletonText = props => {\n  const _props$noOfLines = props.noOfLines,\n        noOfLines = _props$noOfLines === void 0 ? defaultNoOfLines : _props$noOfLines,\n        _props$spacing = props.spacing,\n        spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n        _props$skeletonHeight = props.skeletonHeight,\n        skeletonHeight = _props$skeletonHeight === void 0 ? \"0.5rem\" : _props$skeletonHeight,\n        className = props.className,\n        startColor2 = props.startColor,\n        endColor2 = props.endColor,\n        isLoaded = props.isLoaded,\n        fadeDuration = props.fadeDuration,\n        speed = props.speed,\n        children = props.children,\n        rest = _objectWithoutProperties(props, [\"noOfLines\", \"spacing\", \"skeletonHeight\", \"className\", \"startColor\", \"endColor\", \"isLoaded\", \"fadeDuration\", \"speed\", \"children\"]);\n\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n\n  const getWidth = index => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  const _className = cx(\"chakra-skeleton__group\", className);\n\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra.div, {\n      className: _className,\n      ...rest\n    }, numbers.map((number, index) => {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n\n      const sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return (\n        /* @__PURE__ */\n        React.createElement(Skeleton, {\n          key: numbers.length.toString() + number,\n          startColor: startColor2,\n          endColor: endColor2,\n          isLoaded,\n          fadeDuration,\n          speed,\n          ...sizeProps\n        }, index === 0 ? children : void 0)\n      );\n    }))\n  );\n};\n\nSkeletonText.displayName = \"SkeletonText\";\n\nvar SkeletonCircle = ({\n  size = \"2rem\",\n  ...rest\n}) =>\n/* @__PURE__ */\nReact.createElement(Skeleton, {\n  borderRadius: \"full\",\n  boxSize: size,\n  ...rest\n});\n\nSkeletonCircle.displayName = \"SkeletonCircle\";\nexport { Skeleton, SkeletonCircle, SkeletonText };","map":null,"metadata":{},"sourceType":"module"}