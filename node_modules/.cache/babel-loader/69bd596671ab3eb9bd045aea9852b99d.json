{"ast":null,"code":"import { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\nconst colorToken = '${c}';\nconst numberToken = '${n}';\n\nfunction test(v) {\n  var _a, _b, _c, _d;\n\n  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;\n}\n\nfunction analyse(v) {\n  if (typeof v === 'number') v = \"\".concat(v);\n  const values = [];\n  let numColors = 0;\n  const colors = v.match(colorRegex);\n\n  if (colors) {\n    numColors = colors.length;\n    v = v.replace(colorRegex, colorToken);\n    values.push(...colors.map(color.parse));\n  }\n\n  const numbers = v.match(floatRegex);\n\n  if (numbers) {\n    v = v.replace(floatRegex, numberToken);\n    values.push(...numbers.map(number.parse));\n  }\n\n  return {\n    values,\n    numColors,\n    tokenised: v\n  };\n}\n\nfunction parse(v) {\n  return analyse(v).values;\n}\n\nfunction createTransformer(v) {\n  const _analyse = analyse(v),\n        values = _analyse.values,\n        numColors = _analyse.numColors,\n        tokenised = _analyse.tokenised;\n\n  const numValues = values.length;\n  return v => {\n    let output = tokenised;\n\n    for (let i = 0; i < numValues; i++) {\n      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n    }\n\n    return output;\n  };\n}\n\nconst convertNumbersToZero = v => typeof v === 'number' ? 0 : v;\n\nfunction getAnimatableNone(v) {\n  const parsed = parse(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nconst complex = {\n  test,\n  parse,\n  createTransformer,\n  getAnimatableNone\n};\nexport { complex };","map":null,"metadata":{},"sourceType":"module"}