{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar generators = require('@motionone/generators');\n\nfunction createGeneratorEasing(createGenerator) {\n  const keyframesCache = new WeakMap();\n  return (options = {}) => {\n    const generatorCache = new Map();\n\n    const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {\n      const key = \"\".concat(from, \"-\").concat(to, \"-\").concat(velocity, \"-\").concat(isScale);\n\n      if (!generatorCache.has(key)) {\n        generatorCache.set(key, createGenerator(Object.assign({\n          from,\n          to,\n          velocity,\n          restSpeed: isScale ? 0.05 : 2,\n          restDistance: isScale ? 0.01 : 0.5\n        }, options)));\n      }\n\n      return generatorCache.get(key);\n    };\n\n    const getKeyframes = generator => {\n      if (!keyframesCache.has(generator)) {\n        keyframesCache.set(generator, generators.pregenerateKeyframes(generator));\n      }\n\n      return keyframesCache.get(generator);\n    };\n\n    return {\n      createAnimation: (keyframes, getOrigin, canUseGenerator, name, motionValue) => {\n        var _a, _b;\n\n        let settings;\n        const numKeyframes = keyframes.length;\n        let shouldUseGenerator = canUseGenerator && numKeyframes <= 2 && keyframes.every(isNumberOrNull);\n\n        if (shouldUseGenerator) {\n          const target = keyframes[numKeyframes - 1];\n          const unresolvedOrigin = numKeyframes === 1 ? null : keyframes[0];\n          let velocity = 0;\n          let origin = 0;\n          const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n\n          if (prevGenerator) {\n            /**\n             * If we have a generator for this value we can use it to resolve\n             * the animations's current value and velocity.\n             */\n            const animation = motionValue.animation,\n                  generatorStartTime = motionValue.generatorStartTime;\n            const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n            const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n            const prevGeneratorCurrent = prevGenerator(currentTime).current;\n            origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;\n\n            if (numKeyframes === 1 || numKeyframes === 2 && keyframes[0] === null) {\n              velocity = generators.calcGeneratorVelocity(t => prevGenerator(t).current, currentTime, prevGeneratorCurrent);\n            }\n          } else {\n            origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin());\n          }\n\n          const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n          const keyframesMetadata = getKeyframes(generator);\n          settings = Object.assign(Object.assign({}, keyframesMetadata), {\n            easing: \"linear\"\n          }); // TODO Add test for this\n\n          if (motionValue) {\n            motionValue.generator = generator;\n            motionValue.generatorStartTime = performance.now();\n          }\n        } else {\n          const keyframesMetadata = getKeyframes(getGenerator(0, 100));\n          settings = {\n            easing: \"ease\",\n            duration: keyframesMetadata.overshootDuration\n          };\n        }\n\n        return settings;\n      }\n    };\n  };\n}\n\nconst isNumberOrNull = value => typeof value !== \"string\";\n\nexports.createGeneratorEasing = createGeneratorEasing;","map":null,"metadata":{},"sourceType":"script"}