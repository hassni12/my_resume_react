{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\"; // src/image.tsx\n\nimport { chakra, forwardRef as forwardRef2 } from \"@chakra-ui/system\"; // ../../utilities/object-utils/src/index.ts\n\nfunction omit(object, keysToOmit = []) {\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) delete clone[key];\n  }\n\n  return clone;\n} // src/use-image.ts\n\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useImage(props) {\n  const loading = props.loading,\n        src = props.src,\n        srcSet = props.srcSet,\n        onLoad = props.onLoad,\n        onError = props.onError,\n        crossOrigin = props.crossOrigin,\n        sizes = props.sizes,\n        ignoreFallback = props.ignoreFallback;\n\n  const _useState = useState(\"pending\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        status = _useState2[0],\n        setStatus = _useState2[1];\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return void 0;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\"; // src/native-image.tsx\n\n\nimport { forwardRef } from \"@chakra-ui/system\";\nvar NativeImage = forwardRef(function NativeImage2(props, ref) {\n  const htmlWidth = props.htmlWidth,\n        htmlHeight = props.htmlHeight,\n        alt = props.alt,\n        rest = _objectWithoutProperties(props, [\"htmlWidth\", \"htmlHeight\", \"alt\"]);\n\n  return (\n    /* @__PURE__ */\n    React.createElement(\"img\", {\n      width: htmlWidth,\n      height: htmlHeight,\n      ref,\n      alt,\n      ...rest\n    })\n  );\n});\nNativeImage.displayName = \"NativeImage\"; // src/image.tsx\n\nvar Image2 = forwardRef2(function Image3(props, ref) {\n  const fallbackSrc = props.fallbackSrc,\n        fallback = props.fallback,\n        src = props.src,\n        srcSet = props.srcSet,\n        align = props.align,\n        fit = props.fit,\n        loading = props.loading,\n        ignoreFallback = props.ignoreFallback,\n        crossOrigin = props.crossOrigin,\n        _props$fallbackStrate = props.fallbackStrategy,\n        fallbackStrategy = _props$fallbackStrate === void 0 ? \"beforeLoadOrError\" : _props$fallbackStrate,\n        referrerPolicy = props.referrerPolicy,\n        rest = _objectWithoutProperties(props, [\"fallbackSrc\", \"fallback\", \"src\", \"srcSet\", \"align\", \"fit\", \"loading\", \"ignoreFallback\", \"crossOrigin\", \"fallbackStrategy\", \"referrerPolicy\"]);\n\n  const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;\n  const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;\n  const status = useImage({ ...props,\n    ignoreFallback: shouldIgnoreFallbackImage\n  });\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"]))\n  };\n\n  if (showFallbackImage) {\n    if (fallback) return fallback;\n    return (\n      /* @__PURE__ */\n      React.createElement(chakra.img, {\n        as: NativeImage,\n        className: \"chakra-image__placeholder\",\n        src: fallbackSrc,\n        ...shared\n      })\n    );\n  }\n\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra.img, {\n      as: NativeImage,\n      src,\n      srcSet,\n      crossOrigin,\n      loading,\n      referrerPolicy,\n      className: \"chakra-image\",\n      ...shared\n    })\n  );\n});\nImage2.displayName = \"Image\"; // src/img.tsx\n\nimport { chakra as chakra2, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar Img = forwardRef3((props, ref) =>\n/* @__PURE__ */\nReact.createElement(chakra2.img, {\n  ref,\n  as: NativeImage,\n  className: \"chakra-image\",\n  ...props\n}));\nexport { Image2 as Image, Img, shouldShowFallbackImage, useImage };","map":null,"metadata":{},"sourceType":"module"}