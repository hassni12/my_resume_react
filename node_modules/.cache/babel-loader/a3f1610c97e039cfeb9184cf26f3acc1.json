{"ast":null,"code":"// src/extend-theme.ts\nimport { theme, isChakraTheme } from \"@chakra-ui/theme\";\nimport mergeWith from \"lodash.mergewith\";\n\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\n\nfunction pipe(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\n\nfunction extendTheme(...extensions) {\n  let overrides = [...extensions];\n  let baseTheme = extensions[extensions.length - 1];\n\n  if (isChakraTheme(baseTheme) && overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = theme;\n  }\n\n  return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(baseTheme);\n}\n\nfunction mergeThemeOverride(...overrides) {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\n\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return (...args) => {\n      const sourceValue = isFunction(source) ? source(...args) : source;\n      const overrideValue = isFunction(override) ? override(...args) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  }\n\n  return void 0;\n} // ../shared-utils/src/index.ts\n\n\nfunction isObject(value) {\n  const type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !Array.isArray(value);\n} // src/theme-extensions/with-default-color-scheme.ts\n\n\nfunction withDefaultColorScheme({\n  colorScheme,\n  components\n}) {\n  return theme2 => {\n    let names = Object.keys(theme2.components || {});\n\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(componentName => {\n        const withColorScheme = {\n          defaultProps: {\n            colorScheme\n          }\n        };\n        return [componentName, withColorScheme];\n      }))\n    });\n  };\n} // src/theme-extensions/with-default-size.ts\n\n\nfunction withDefaultSize({\n  size,\n  components\n}) {\n  return theme2 => {\n    let names = Object.keys(theme2.components || {});\n\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(componentName => {\n        const withSize = {\n          defaultProps: {\n            size\n          }\n        };\n        return [componentName, withSize];\n      }))\n    });\n  };\n} // src/theme-extensions/with-default-variant.ts\n\n\nfunction withDefaultVariant({\n  variant,\n  components\n}) {\n  return theme2 => {\n    let names = Object.keys(theme2.components || {});\n\n    if (Array.isArray(components)) {\n      names = components;\n    } else if (isObject(components)) {\n      names = Object.keys(components);\n    }\n\n    return mergeThemeOverride(theme2, {\n      components: Object.fromEntries(names.map(componentName => {\n        const withVariant = {\n          defaultProps: {\n            variant\n          }\n        };\n        return [componentName, withVariant];\n      }))\n    });\n  };\n} // src/theme-extensions/with-default-props.ts\n\n\nfunction pipe2(...fns) {\n  return v => fns.reduce((a, b) => b(a), v);\n}\n\nfunction withDefaultProps({\n  defaultProps: {\n    colorScheme,\n    variant,\n    size\n  },\n  components\n}) {\n  const identity = t => t;\n\n  const fns = [colorScheme ? withDefaultColorScheme({\n    colorScheme,\n    components\n  }) : identity, size ? withDefaultSize({\n    size,\n    components\n  }) : identity, variant ? withDefaultVariant({\n    variant,\n    components\n  }) : identity];\n  return theme2 => mergeThemeOverride(pipe2(...fns)(theme2));\n}\n\nexport { extendTheme, mergeThemeOverride, withDefaultColorScheme, withDefaultProps, withDefaultSize, withDefaultVariant };","map":null,"metadata":{},"sourceType":"module"}