{"ast":null,"code":"import _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\n\nfunction useMotionValue(initial) {\n  const value = useConstant(() => motionValue(initial));\n  /**\n   * If this motion value is being used in static mode, like on\n   * the Framer canvas, force components to rerender when the motion\n   * value is updated.\n   */\n\n  const _useContext = useContext(MotionConfigContext),\n        isStatic = _useContext.isStatic;\n\n  if (isStatic) {\n    const _useState = useState(initial),\n          _useState2 = _slicedToArray(_useState, 2),\n          setLatest = _useState2[1];\n\n    useEffect(() => value.onChange(setLatest), []);\n  }\n\n  return value;\n}\n\nexport { useMotionValue };","map":null,"metadata":{},"sourceType":"module"}