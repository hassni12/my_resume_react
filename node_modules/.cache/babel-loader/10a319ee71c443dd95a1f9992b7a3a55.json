{"ast":null,"code":"import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nconst names = [\"LayoutMeasure\", \"BeforeLayoutMeasure\", \"LayoutUpdate\", \"ViewportBoxUpdate\", \"Update\", \"Render\", \"AnimationComplete\", \"LayoutAnimationComplete\", \"AnimationStart\", \"LayoutAnimationStart\", \"SetAxisTarget\", \"Unmount\"];\n\nfunction createLifecycles() {\n  const managers = names.map(() => new SubscriptionManager());\n  const propSubscriptions = {};\n  const lifecycles = {\n    clearAllListeners: () => managers.forEach(manager => manager.clear()),\n    updatePropListeners: props => {\n      names.forEach(name => {\n        var _a;\n\n        const on = \"on\" + name;\n        const propListener = props[on]; // Unsubscribe existing subscription\n\n        (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions); // Add new subscription\n\n        if (propListener) {\n          propSubscriptions[name] = lifecycles[on](propListener);\n        }\n      });\n    }\n  };\n  managers.forEach((manager, i) => {\n    lifecycles[\"on\" + names[i]] = handler => manager.add(handler);\n\n    lifecycles[\"notify\" + names[i]] = (...args) => manager.notify(...args);\n  });\n  return lifecycles;\n}\n\nexport { createLifecycles };","map":null,"metadata":{},"sourceType":"module"}