{"ast":null,"code":"import _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\"; // src/env.tsx\n\nimport { createContext, startTransition, useContext, useMemo, useState, useEffect } from \"react\"; // src/mock-document.ts\n\nvar doc = {\n  body: {\n    classList: {\n      add() {},\n\n      remove() {}\n\n    }\n  },\n\n  addEventListener() {},\n\n  removeEventListener() {},\n\n  activeElement: {\n    blur() {},\n\n    nodeName: \"\"\n  },\n\n  querySelector() {\n    return null;\n  },\n\n  querySelectorAll() {\n    return [];\n  },\n\n  getElementById() {\n    return null;\n  },\n\n  createEvent() {\n    return {\n      initEvent() {}\n\n    };\n  },\n\n  createElement() {\n    return {\n      children: [],\n      childNodes: [],\n      style: {},\n\n      setAttribute() {},\n\n      getElementsByTagName() {\n        return [];\n      }\n\n    };\n  }\n\n};\nvar ssrDocument = doc; // src/mock-window.ts\n\nvar noop = () => {};\n\nvar win = {\n  document: ssrDocument,\n  navigator: {\n    userAgent: \"\"\n  },\n  CustomEvent: function CustomEvent() {\n    return this;\n  },\n  addEventListener: noop,\n  removeEventListener: noop,\n\n  getComputedStyle() {\n    return {\n      getPropertyValue() {\n        return \"\";\n      }\n\n    };\n  },\n\n  matchMedia() {\n    return {\n      matches: false,\n      addListener: noop,\n      removeListener: noop\n    };\n  },\n\n  requestAnimationFrame(callback) {\n    if (typeof setTimeout === \"undefined\") {\n      callback();\n      return null;\n    }\n\n    return setTimeout(callback, 0);\n  },\n\n  cancelAnimationFrame(id) {\n    if (typeof setTimeout === \"undefined\") return;\n    clearTimeout(id);\n  },\n\n  setTimeout: () => 0,\n  clearTimeout: noop,\n  setInterval: () => 0,\n  clearInterval: noop\n};\nvar ssrWindow = win; // src/env.tsx\n\nvar mockEnv = {\n  window: ssrWindow,\n  document: ssrDocument\n};\nvar defaultEnv = typeof window !== \"undefined\" ? {\n  window,\n  document\n} : mockEnv;\nvar EnvironmentContext = createContext(defaultEnv);\nEnvironmentContext.displayName = \"EnvironmentContext\";\n\nfunction useEnvironment() {\n  return useContext(EnvironmentContext);\n}\n\nfunction EnvironmentProvider(props) {\n  const children = props.children,\n        environmentProp = props.environment;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        node = _useState2[0],\n        setNode = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        mounted = _useState4[0],\n        setMounted = _useState4[1];\n\n  useEffect(() => setMounted(true), []);\n  const context = useMemo(() => {\n    if (environmentProp) {\n      return environmentProp;\n    }\n\n    const doc2 = node == null ? void 0 : node.ownerDocument;\n    const win2 = node == null ? void 0 : node.ownerDocument.defaultView;\n    const env = doc2 ? {\n      document: doc2,\n      window: win2\n    } : defaultEnv;\n    return env;\n  }, [node, environmentProp]);\n  return (\n    /* @__PURE__ */\n    React.createElement(EnvironmentContext.Provider, {\n      value: context\n    }, children, !environmentProp && mounted &&\n    /* @__PURE__ */\n    React.createElement(\"span\", {\n      id: \"__chakra_env\",\n      hidden: true,\n      ref: el => {\n        startTransition(() => {\n          if (el) setNode(el);\n        });\n      }\n    }))\n  );\n}\n\nEnvironmentProvider.displayName = \"EnvironmentProvider\";\nexport { EnvironmentProvider, useEnvironment };","map":null,"metadata":{},"sourceType":"module"}