{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar resolveElements = require('../../utils/resolve-elements.cjs.js');\n\nconst resizeHandlers = new WeakMap();\nlet observer;\n\nfunction getElementSize(target, borderBoxSize) {\n  if (borderBoxSize) {\n    const _borderBoxSize$ = borderBoxSize[0],\n          inlineSize = _borderBoxSize$.inlineSize,\n          blockSize = _borderBoxSize$.blockSize;\n    return {\n      width: inlineSize,\n      height: blockSize\n    };\n  } else if (target instanceof SVGElement && \"getBBox\" in target) {\n    return target.getBBox();\n  } else {\n    return {\n      width: target.offsetWidth,\n      height: target.offsetHeight\n    };\n  }\n}\n\nfunction notifyTarget({\n  target,\n  contentRect,\n  borderBoxSize\n}) {\n  var _a;\n\n  (_a = resizeHandlers.get(target)) === null || _a === void 0 ? void 0 : _a.forEach(handler => {\n    handler({\n      target,\n      contentSize: contentRect,\n\n      get size() {\n        return getElementSize(target, borderBoxSize);\n      }\n\n    });\n  });\n}\n\nfunction notifyAll(entries) {\n  entries.forEach(notifyTarget);\n}\n\nfunction createResizeObserver() {\n  if (typeof ResizeObserver === \"undefined\") return;\n  observer = new ResizeObserver(notifyAll);\n}\n\nfunction resizeElement(target, handler) {\n  if (!observer) createResizeObserver();\n  const elements = resolveElements.resolveElements(target);\n  elements.forEach(element => {\n    let elementHandlers = resizeHandlers.get(element);\n\n    if (!elementHandlers) {\n      elementHandlers = new Set();\n      resizeHandlers.set(element, elementHandlers);\n    }\n\n    elementHandlers.add(handler);\n    observer === null || observer === void 0 ? void 0 : observer.observe(element);\n  });\n  return () => {\n    elements.forEach(element => {\n      const elementHandlers = resizeHandlers.get(element);\n      elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.delete(handler);\n\n      if (!(elementHandlers === null || elementHandlers === void 0 ? void 0 : elementHandlers.size)) {\n        observer === null || observer === void 0 ? void 0 : observer.unobserve(element);\n      }\n    });\n  };\n}\n\nexports.resizeElement = resizeElement;","map":null,"metadata":{},"sourceType":"script"}