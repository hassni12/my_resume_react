{"ast":null,"code":"import { isCSSVariable } from '../../render/dom/utils/is-css-variable.mjs';\nimport { transformProps } from '../../render/html/utils/transform.mjs';\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { MotionValue } from '../index.mjs';\nimport { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n  constructor() {\n    super(...arguments);\n    this.members = [];\n    this.transforms = new Set();\n  }\n\n  add(name) {\n    let memberName;\n\n    if (transformProps.has(name)) {\n      this.transforms.add(name);\n      memberName = \"transform\";\n    } else if (!name.startsWith(\"origin\") && !isCSSVariable(name) && name !== \"willChange\") {\n      memberName = camelToDash(name);\n    }\n\n    if (memberName) {\n      addUniqueItem(this.members, memberName);\n      this.update();\n    }\n  }\n\n  remove(name) {\n    if (transformProps.has(name)) {\n      this.transforms.delete(name);\n\n      if (!this.transforms.size) {\n        removeItem(this.members, \"transform\");\n      }\n    } else {\n      removeItem(this.members, camelToDash(name));\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.set(this.members.length ? this.members.join(\", \") : \"auto\");\n  }\n\n}\n\nfunction useWillChange() {\n  return useConstant(() => new WillChangeMotionValue(\"auto\"));\n}\n\nexport { WillChangeMotionValue, useWillChange };","map":null,"metadata":{},"sourceType":"module"}