{"ast":null,"code":"import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\n\nclass PopChildMeasure extends React.Component {\n  getSnapshotBeforeUpdate(prevProps) {\n    const element = this.props.childRef.current;\n\n    if (element && prevProps.isPresent && !this.props.isPresent) {\n      const size = this.props.sizeRef.current;\n      size.height = element.offsetHeight || 0;\n      size.width = element.offsetWidth || 0;\n      size.top = element.offsetTop;\n      size.left = element.offsetLeft;\n    }\n\n    return null;\n  }\n  /**\n   * Required with getSnapshotBeforeUpdate to stop React complaining.\n   */\n\n\n  componentDidUpdate() {}\n\n  render() {\n    return this.props.children;\n  }\n\n}\n\nfunction PopChild({\n  children,\n  isPresent\n}) {\n  const id = useId();\n  const ref = useRef(null);\n  const size = useRef({\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  });\n  /**\n   * We create and inject a style block so we can apply this explicit\n   * sizing in a non-destructive manner by just deleting the style block.\n   *\n   * We can't apply size via render as the measurement happens\n   * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n   * styles directly on the DOM node, we might be overwriting\n   * styles set via the style prop.\n   */\n\n  useInsertionEffect(() => {\n    const _size$current = size.current,\n          width = _size$current.width,\n          height = _size$current.height,\n          top = _size$current.top,\n          left = _size$current.left;\n    if (isPresent || !ref.current || !width || !height) return;\n    ref.current.dataset.motionPopId = id;\n    const style = document.createElement(\"style\");\n    document.head.appendChild(style);\n\n    if (style.sheet) {\n      style.sheet.insertRule(\"\\n          [data-motion-pop-id=\\\"\".concat(id, \"\\\"] {\\n            position: absolute !important;\\n            width: \").concat(width, \"px !important;\\n            height: \").concat(height, \"px !important;\\n            top: \").concat(top, \"px !important;\\n            left: \").concat(left, \"px !important;\\n          }\\n        \"));\n    }\n\n    return () => {\n      document.head.removeChild(style);\n    };\n  }, [isPresent]);\n  return React.createElement(PopChildMeasure, {\n    isPresent: isPresent,\n    childRef: ref,\n    sizeRef: size\n  }, React.cloneElement(children, {\n    ref\n  }));\n}\n\nexport { PopChild };","map":null,"metadata":{},"sourceType":"module"}