{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst clamp = (min, max) => v => Math.max(Math.min(v, max), min);\n\nconst sanitize = v => v % 1 ? Number(v.toFixed(5)) : v;\n\nconst floatRegex = /(-)?([\\d]*\\.?[\\d])+/g;\nconst colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))/gi;\nconst singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2}(-?[\\d\\.]+%?)\\s*[\\,\\/]?\\s*[\\d\\.]*%?\\))$/i;\n\nfunction isString(v) {\n  return typeof v === 'string';\n}\n\nconst number = {\n  test: v => typeof v === 'number',\n  parse: parseFloat,\n  transform: v => v\n};\nconst alpha = Object.assign(Object.assign({}, number), {\n  transform: clamp(0, 1)\n});\nconst scale = Object.assign(Object.assign({}, number), {\n  default: 1\n});\n\nconst createUnitType = unit => ({\n  test: v => isString(v) && v.endsWith(unit) && v.split(' ').length === 1,\n  parse: parseFloat,\n  transform: v => \"\".concat(v).concat(unit)\n});\n\nconst degrees = createUnitType('deg');\nconst percent = createUnitType('%');\nconst px = createUnitType('px');\nconst vh = createUnitType('vh');\nconst vw = createUnitType('vw');\nconst progressPercentage = Object.assign(Object.assign({}, percent), {\n  parse: v => percent.parse(v) / 100,\n  transform: v => percent.transform(v * 100)\n});\n\nconst isColorString = (type, testProp) => v => {\n  return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));\n};\n\nconst splitColor = (aName, bName, cName) => v => {\n  if (!isString(v)) return v;\n\n  const _v$match = v.match(floatRegex),\n        _v$match2 = _slicedToArray(_v$match, 4),\n        a = _v$match2[0],\n        b = _v$match2[1],\n        c = _v$match2[2],\n        alpha = _v$match2[3];\n\n  return {\n    [aName]: parseFloat(a),\n    [bName]: parseFloat(b),\n    [cName]: parseFloat(c),\n    alpha: alpha !== undefined ? parseFloat(alpha) : 1\n  };\n};\n\nconst hsla = {\n  test: isColorString('hsl', 'hue'),\n  parse: splitColor('hue', 'saturation', 'lightness'),\n  transform: ({\n    hue,\n    saturation,\n    lightness,\n    alpha: alpha$1 = 1\n  }) => {\n    return 'hsla(' + Math.round(hue) + ', ' + percent.transform(sanitize(saturation)) + ', ' + percent.transform(sanitize(lightness)) + ', ' + sanitize(alpha.transform(alpha$1)) + ')';\n  }\n};\nconst clampRgbUnit = clamp(0, 255);\nconst rgbUnit = Object.assign(Object.assign({}, number), {\n  transform: v => Math.round(clampRgbUnit(v))\n});\nconst rgba = {\n  test: isColorString('rgb', 'red'),\n  parse: splitColor('red', 'green', 'blue'),\n  transform: ({\n    red,\n    green,\n    blue,\n    alpha: alpha$1 = 1\n  }) => 'rgba(' + rgbUnit.transform(red) + ', ' + rgbUnit.transform(green) + ', ' + rgbUnit.transform(blue) + ', ' + sanitize(alpha.transform(alpha$1)) + ')'\n};\n\nfunction parseHex(v) {\n  let r = '';\n  let g = '';\n  let b = '';\n  let a = '';\n\n  if (v.length > 5) {\n    r = v.substr(1, 2);\n    g = v.substr(3, 2);\n    b = v.substr(5, 2);\n    a = v.substr(7, 2);\n  } else {\n    r = v.substr(1, 1);\n    g = v.substr(2, 1);\n    b = v.substr(3, 1);\n    a = v.substr(4, 1);\n    r += r;\n    g += g;\n    b += b;\n    a += a;\n  }\n\n  return {\n    red: parseInt(r, 16),\n    green: parseInt(g, 16),\n    blue: parseInt(b, 16),\n    alpha: a ? parseInt(a, 16) / 255 : 1\n  };\n}\n\nconst hex = {\n  test: isColorString('#'),\n  parse: parseHex,\n  transform: rgba.transform\n};\nconst color = {\n  test: v => rgba.test(v) || hex.test(v) || hsla.test(v),\n  parse: v => {\n    if (rgba.test(v)) {\n      return rgba.parse(v);\n    } else if (hsla.test(v)) {\n      return hsla.parse(v);\n    } else {\n      return hex.parse(v);\n    }\n  },\n  transform: v => {\n    return isString(v) ? v : v.hasOwnProperty('red') ? rgba.transform(v) : hsla.transform(v);\n  }\n};\nconst colorToken = '${c}';\nconst numberToken = '${n}';\n\nfunction test(v) {\n  var _a, _b, _c, _d;\n\n  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;\n}\n\nfunction analyse(v) {\n  if (typeof v === 'number') v = \"\".concat(v);\n  const values = [];\n  let numColors = 0;\n  const colors = v.match(colorRegex);\n\n  if (colors) {\n    numColors = colors.length;\n    v = v.replace(colorRegex, colorToken);\n    values.push(...colors.map(color.parse));\n  }\n\n  const numbers = v.match(floatRegex);\n\n  if (numbers) {\n    v = v.replace(floatRegex, numberToken);\n    values.push(...numbers.map(number.parse));\n  }\n\n  return {\n    values,\n    numColors,\n    tokenised: v\n  };\n}\n\nfunction parse(v) {\n  return analyse(v).values;\n}\n\nfunction createTransformer(v) {\n  const _analyse = analyse(v),\n        values = _analyse.values,\n        numColors = _analyse.numColors,\n        tokenised = _analyse.tokenised;\n\n  const numValues = values.length;\n  return v => {\n    let output = tokenised;\n\n    for (let i = 0; i < numValues; i++) {\n      output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n    }\n\n    return output;\n  };\n}\n\nconst convertNumbersToZero = v => typeof v === 'number' ? 0 : v;\n\nfunction getAnimatableNone(v) {\n  const parsed = parse(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nconst complex = {\n  test,\n  parse,\n  createTransformer,\n  getAnimatableNone\n};\nconst maxDefaults = new Set(['brightness', 'contrast', 'saturate', 'opacity']);\n\nfunction applyDefaultFilter(v) {\n  let _v$slice$split = v.slice(0, -1).split('('),\n      _v$slice$split2 = _slicedToArray(_v$slice$split, 2),\n      name = _v$slice$split2[0],\n      value = _v$slice$split2[1];\n\n  if (name === 'drop-shadow') return v;\n\n  const _ref = value.match(floatRegex) || [],\n        _ref2 = _slicedToArray(_ref, 1),\n        number = _ref2[0];\n\n  if (!number) return v;\n  const unit = value.replace(number, '');\n  let defaultValue = maxDefaults.has(name) ? 1 : 0;\n  if (number !== value) defaultValue *= 100;\n  return name + '(' + defaultValue + unit + ')';\n}\n\nconst functionRegex = /([a-z-]*)\\(.*?\\)/g;\nconst filter = Object.assign(Object.assign({}, complex), {\n  getAnimatableNone: v => {\n    const functions = v.match(functionRegex);\n    return functions ? functions.map(applyDefaultFilter).join(' ') : v;\n  }\n});\nexports.alpha = alpha;\nexports.color = color;\nexports.complex = complex;\nexports.degrees = degrees;\nexports.filter = filter;\nexports.hex = hex;\nexports.hsla = hsla;\nexports.number = number;\nexports.percent = percent;\nexports.progressPercentage = progressPercentage;\nexports.px = px;\nexports.rgbUnit = rgbUnit;\nexports.rgba = rgba;\nexports.scale = scale;\nexports.vh = vh;\nexports.vw = vw;","map":null,"metadata":{},"sourceType":"script"}