{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup({\n  children,\n  as = \"ul\",\n  axis = \"y\",\n  onReorder,\n  values,\n  ...props\n}, externalRef) {\n  const Component = useConstant(() => motion(as));\n  const order = [];\n  const isReordering = useRef(false);\n  invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  const context = {\n    axis,\n    registerItem: (value, layout) => {\n      /**\n       * Ensure entries can't add themselves more than once\n       */\n      if (layout && order.findIndex(entry => value === entry.value) === -1) {\n        order.push({\n          value,\n          layout: layout[axis]\n        });\n        order.sort(compareMin);\n      }\n    },\n    updateOrder: (id, offset, velocity) => {\n      if (isReordering.current) return;\n      const newOrder = checkReorder(order, id, offset, velocity);\n\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(value => values.indexOf(value) !== -1));\n      }\n    }\n  };\n  useEffect(() => {\n    isReordering.current = false;\n  });\n  return React.createElement(Component, { ...props,\n    ref: externalRef\n  }, React.createElement(ReorderContext.Provider, {\n    value: context\n  }, children));\n}\n\nconst Group = forwardRef(ReorderGroup);\n\nfunction getValue(item) {\n  return item.value;\n}\n\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };","map":null,"metadata":{},"sourceType":"module"}