{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\"; // src/tag.tsx\n\nimport { Icon } from \"@chakra-ui/icon\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\n\nvar _createContext = createContext({\n  name: \"TagStylesContext\",\n  errorMessage: \"useTagStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Tag />\\\" \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    TagStylesProvider = _createContext2[0],\n    useTagStyles = _createContext2[1];\n\nvar Tag = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tag\", props);\n  const ownProps = omitThemingProps(props);\n  const containerStyles = {\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    maxWidth: \"100%\",\n    ...styles.container\n  };\n  return (\n    /* @__PURE__ */\n    React.createElement(TagStylesProvider, {\n      value: styles\n    },\n    /* @__PURE__ */\n    React.createElement(chakra.span, {\n      ref,\n      ...ownProps,\n      __css: containerStyles\n    }))\n  );\n});\nTag.displayName = \"Tag\";\nvar TagLabel = forwardRef((props, ref) => {\n  const styles = useTagStyles();\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra.span, {\n      ref,\n      noOfLines: 1,\n      ...props,\n      __css: styles.label\n    })\n  );\n});\nTagLabel.displayName = \"TagLabel\";\nvar TagLeftIcon = forwardRef((props, ref) =>\n/* @__PURE__ */\nReact.createElement(Icon, {\n  ref,\n  verticalAlign: \"top\",\n  marginEnd: \"0.5rem\",\n  ...props\n}));\nTagLeftIcon.displayName = \"TagLeftIcon\";\nvar TagRightIcon = forwardRef((props, ref) =>\n/* @__PURE__ */\nReact.createElement(Icon, {\n  ref,\n  verticalAlign: \"top\",\n  marginStart: \"0.5rem\",\n  ...props\n}));\nTagRightIcon.displayName = \"TagRightIcon\";\n\nvar TagCloseIcon = props =>\n/* @__PURE__ */\nReact.createElement(Icon, {\n  verticalAlign: \"inherit\",\n  viewBox: \"0 0 512 512\",\n  ...props\n},\n/* @__PURE__ */\nReact.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M289.94 256l95-95A24 24 0 00351 127l-95 95-95-95a24 24 0 00-34 34l95 95-95 95a24 24 0 1034 34l95-95 95 95a24 24 0 0034-34z\"\n}));\n\nTagCloseIcon.displayName = \"TagCloseIcon\";\nvar TagCloseButton = forwardRef((props, ref) => {\n  const isDisabled = props.isDisabled,\n        children = props.children,\n        rest = _objectWithoutProperties(props, [\"isDisabled\", \"children\"]);\n\n  const styles = useTagStyles();\n  const btnStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    outline: \"0\",\n    ...styles.closeButton\n  };\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra.button, {\n      ref,\n      \"aria-label\": \"close\",\n      ...rest,\n      type: \"button\",\n      disabled: isDisabled,\n      __css: btnStyles\n    }, children ||\n    /* @__PURE__ */\n    React.createElement(TagCloseIcon, null))\n  );\n});\nTagCloseButton.displayName = \"TagCloseButton\";\nexport { Tag, TagCloseButton, TagLabel, TagLeftIcon, TagRightIcon, useTagStyles };","map":null,"metadata":{},"sourceType":"module"}