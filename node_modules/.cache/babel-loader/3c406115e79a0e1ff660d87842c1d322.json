{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar info = require('./info.cjs.js');\n\nvar index = require('./offsets/index.cjs.js');\n\nfunction measure(container, target = container, info) {\n  /**\n   * Find inset of target within scrollable container\n   */\n  info.x.targetOffset = 0;\n  info.y.targetOffset = 0;\n\n  if (target !== container) {\n    let node = target;\n\n    while (node && node != container) {\n      info.x.targetOffset += node.offsetLeft;\n      info.y.targetOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n  }\n\n  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n  info.x.containerLength = container.clientWidth;\n  info.y.containerLength = container.clientHeight;\n}\n\nfunction createOnScrollHandler(element, onScroll, info$1, options = {}) {\n  const axis = options.axis || \"y\";\n  return {\n    measure: () => measure(element, options.target, info$1),\n    update: time => {\n      info.updateScrollInfo(element, info$1, time);\n\n      if (options.offset || options.target) {\n        index.resolveOffsets(element, info$1, options);\n      }\n    },\n    notify: utils.isFunction(onScroll) ? () => onScroll(info$1) : scrubAnimation(onScroll, info$1[axis])\n  };\n}\n\nfunction scrubAnimation(controls, axisInfo) {\n  controls.pause();\n  controls.forEachNative((animation, {\n    easing\n  }) => {\n    var _a, _b;\n\n    if (animation.updateDuration) {\n      if (!easing) animation.easing = utils.noopReturn;\n      animation.updateDuration(1);\n    } else {\n      const timingOptions = {\n        duration: 1000\n      };\n      if (!easing) timingOptions.easing = \"linear\";\n      (_b = (_a = animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming) === null || _b === void 0 ? void 0 : _b.call(_a, timingOptions);\n    }\n  });\n  return () => {\n    controls.currentTime = axisInfo.progress;\n  };\n}\n\nexports.createOnScrollHandler = createOnScrollHandler;","map":null,"metadata":{},"sourceType":"script"}