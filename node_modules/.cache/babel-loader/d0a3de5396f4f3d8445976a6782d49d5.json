{"ast":null,"code":"import _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// src/index.ts\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\n\nfunction useControllableState(props) {\n  const valueProp = props.value,\n        defaultValue = props.defaultValue,\n        onChange = props.onChange,\n        _props$shouldUpdate = props.shouldUpdate,\n        shouldUpdate = _props$shouldUpdate === void 0 ? (prev, next) => prev !== next : _props$shouldUpdate;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n\n  const _useState = useState(defaultValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        uncontrolledState = _useState2[0],\n        setUncontrolledState = _useState2[1];\n\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\n\nexport { useControllableProp, useControllableState };","map":null,"metadata":{},"sourceType":"module"}