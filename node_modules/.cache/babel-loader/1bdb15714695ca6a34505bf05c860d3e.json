{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n// ../../../react-shim.js\nimport React from \"react\"; // ../../utilities/shared-utils/src/index.ts\n\nvar cx = (...classNames) => classNames.filter(Boolean).join(\" \"); // src/breadcrumb.tsx\n\n\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\"; // src/breadcrumb-context.ts\n\nimport { createContext } from \"@chakra-ui/react-context\";\n\nvar _createContext = createContext({\n  name: \"BreadcrumbStylesContext\",\n  errorMessage: \"useBreadcrumbStyles returned is 'undefined'. Seems you forgot to wrap the components in \\\"<Breadcrumb />\\\" \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    BreadcrumbStylesProvider = _createContext2[0],\n    useBreadcrumbStyles = _createContext2[1]; // src/breadcrumb.tsx\n\n\nvar Breadcrumb = forwardRef(function Breadcrumb2(props, ref) {\n  const styles = useMultiStyleConfig(\"Breadcrumb\", props);\n  const ownProps = omitThemingProps(props);\n\n  const children = ownProps.children,\n        _ownProps$spacing = ownProps.spacing,\n        spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n        _ownProps$separator = ownProps.separator,\n        separator = _ownProps$separator === void 0 ? \"/\" : _ownProps$separator,\n        className = ownProps.className,\n        listProps = ownProps.listProps,\n        rest = _objectWithoutProperties(ownProps, [\"children\", \"spacing\", \"separator\", \"className\", \"listProps\"]);\n\n  const validChildren = getValidChildren(children);\n  const count = validChildren.length;\n  const clones = validChildren.map((child, index) => cloneElement(child, {\n    separator,\n    spacing,\n    isLastChild: count === index + 1\n  }));\n\n  const _className = cx(\"chakra-breadcrumb\", className);\n\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra.nav, {\n      ref,\n      \"aria-label\": \"breadcrumb\",\n      className: _className,\n      __css: styles.container,\n      ...rest\n    },\n    /* @__PURE__ */\n    React.createElement(BreadcrumbStylesProvider, {\n      value: styles\n    },\n    /* @__PURE__ */\n    React.createElement(chakra.ol, {\n      className: \"chakra-breadcrumb__list\",\n      ...listProps,\n      __css: {\n        display: \"flex\",\n        alignItems: \"center\",\n        ...styles.list\n      }\n    }, clones)))\n  );\n});\nBreadcrumb.displayName = \"Breadcrumb\"; // src/breadcrumb-item.tsx\n\nimport { chakra as chakra4, forwardRef as forwardRef4 } from \"@chakra-ui/system\";\nimport { getValidChildren as getValidChildren2 } from \"@chakra-ui/react-children-utils\"; // src/breadcrumb-separator.tsx\n\nimport { chakra as chakra2, forwardRef as forwardRef2 } from \"@chakra-ui/system\";\nvar BreadcrumbSeparator = forwardRef2(function BreadcrumbSeparator2(props, ref) {\n  const spacing = props.spacing,\n        rest = _objectWithoutProperties(props, [\"spacing\"]);\n\n  const styles = useBreadcrumbStyles();\n  const separatorStyles = {\n    mx: spacing,\n    ...styles.separator\n  };\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra2.span, {\n      ref,\n      role: \"presentation\",\n      ...rest,\n      __css: separatorStyles\n    })\n  );\n});\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"; // src/breadcrumb-link.tsx\n\nimport { chakra as chakra3, forwardRef as forwardRef3 } from \"@chakra-ui/system\";\nvar BreadcrumbLink = forwardRef3(function BreadcrumbLink2(props, ref) {\n  const isCurrentPage = props.isCurrentPage,\n        as = props.as,\n        className = props.className,\n        href = props.href,\n        rest = _objectWithoutProperties(props, [\"isCurrentPage\", \"as\", \"className\", \"href\"]);\n\n  const styles = useBreadcrumbStyles();\n  const sharedProps = {\n    ref,\n    as,\n    className: cx(\"chakra-breadcrumb__link\", className),\n    ...rest\n  };\n\n  if (isCurrentPage) {\n    return (\n      /* @__PURE__ */\n      React.createElement(chakra3.span, {\n        \"aria-current\": \"page\",\n        __css: styles.link,\n        ...sharedProps\n      })\n    );\n  }\n\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra3.a, {\n      __css: styles.link,\n      href,\n      ...sharedProps\n    })\n  );\n});\nBreadcrumbLink.displayName = \"BreadcrumbLink\"; // src/breadcrumb-item.tsx\n\nimport { cloneElement as cloneElement2 } from \"react\";\nvar BreadcrumbItem = forwardRef4(function BreadcrumbItem2(props, ref) {\n  const isCurrentPage = props.isCurrentPage,\n        separator = props.separator,\n        isLastChild = props.isLastChild,\n        spacing = props.spacing,\n        children = props.children,\n        className = props.className,\n        rest = _objectWithoutProperties(props, [\"isCurrentPage\", \"separator\", \"isLastChild\", \"spacing\", \"children\", \"className\"]);\n\n  const validChildren = getValidChildren2(children);\n  const clones = validChildren.map(child => {\n    if (child.type === BreadcrumbLink) {\n      return cloneElement2(child, {\n        isCurrentPage\n      });\n    }\n\n    if (child.type === BreadcrumbSeparator) {\n      return cloneElement2(child, {\n        spacing,\n        children: child.props.children || separator\n      });\n    }\n\n    return child;\n  });\n  const styles = useBreadcrumbStyles();\n  const itemStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    ...styles.item\n  };\n\n  const _className = cx(\"chakra-breadcrumb__list-item\", className);\n\n  return (\n    /* @__PURE__ */\n    React.createElement(chakra4.li, {\n      ref,\n      className: _className,\n      ...rest,\n      __css: itemStyles\n    }, clones, !isLastChild &&\n    /* @__PURE__ */\n    React.createElement(BreadcrumbSeparator, {\n      spacing\n    }, separator))\n  );\n});\nBreadcrumbItem.displayName = \"BreadcrumbItem\";\nexport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbSeparator, useBreadcrumbStyles };","map":null,"metadata":{},"sourceType":"module"}