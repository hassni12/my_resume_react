{"ast":null,"code":"import _objectWithoutProperties from \"/home/hassnain/MERN_APP/RESUME_WEBSITE/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\n\nconst visualElement = ({\n  treeType = \"\",\n  build,\n  getBaseTarget,\n  makeTargetAnimatable,\n  measureViewportBox,\n  render: renderInstance,\n  readValueFromInstance,\n  removeValueFromRenderState,\n  sortNodePosition,\n  scrapeMotionValuesFromProps\n}) => ({\n  parent,\n  props,\n  presenceId,\n  blockInitialAnimation,\n  visualState,\n  reducedMotionConfig\n}, options = {}) => {\n  let isMounted = false;\n  const latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n  /**\n   * The instance of the render-specific node that will be hydrated by the\n   * exposed React ref. So for example, this visual element can host a\n   * HTMLElement, plain object, or Three.js object. The functions provided\n   * in VisualElementConfig allow us to interface with this instance.\n   */\n\n  let instance;\n  /**\n   * Manages the subscriptions for a visual element's lifecycle, for instance\n   * onRender\n   */\n\n  const lifecycles = createLifecycles();\n  /**\n   * A map of all motion values attached to this visual element. Motion\n   * values are source of truth for any given animated value. A motion\n   * value might be provided externally by the component via props.\n   */\n\n  const values = new Map();\n  /**\n   * A map of every subscription that binds the provided or generated\n   * motion values onChange listeners to this visual element.\n   */\n\n  const valueSubscriptions = new Map();\n  /**\n   * A reference to the previously-provided motion values as returned\n   * from scrapeMotionValuesFromProps. We use the keys in here to determine\n   * if any motion values need to be removed after props are updated.\n   */\n\n  let prevMotionValues = {};\n  /**\n   * When values are removed from all animation props we need to search\n   * for a fallback value to animate to. These values are tracked in baseTarget.\n   */\n\n  const baseTarget = { ...latestValues\n  };\n  /**\n   * Create an object of the values we initially animated from (if initial prop present).\n   */\n\n  const initialValues = props.initial ? { ...latestValues\n  } : {}; // Internal methods ========================\n\n  /**\n   * On mount, this will be hydrated with a callback to disconnect\n   * this visual element from its parent on unmount.\n   */\n\n  let removeFromVariantTree;\n  /**\n   * Render the element with the latest styles outside of the React\n   * render lifecycle\n   */\n\n  function render() {\n    if (!instance || !isMounted) return;\n    triggerBuild();\n    renderInstance(instance, renderState, props.style, element.projection);\n  }\n\n  function triggerBuild() {\n    build(element, renderState, latestValues, options, props);\n  }\n\n  function update() {\n    lifecycles.notifyUpdate(latestValues);\n  }\n  /**\n   *\n   */\n\n\n  function bindToMotionValue(key, value) {\n    const removeOnChange = value.onChange(latestValue => {\n      latestValues[key] = latestValue;\n      props.onUpdate && sync.update(update, false, true);\n    });\n    const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n    valueSubscriptions.set(key, () => {\n      removeOnChange();\n      removeOnRenderRequest();\n    });\n  }\n  /**\n   * Any motion values that are provided to the element when created\n   * aren't yet bound to the element, as this would technically be impure.\n   * However, we iterate through the motion values and set them to the\n   * initial values for this component.\n   *\n   * TODO: This is impure and we should look at changing this to run on mount.\n   * Doing so will break some tests but this isn't neccessarily a breaking change,\n   * more a reflection of the test.\n   */\n\n\n  const _scrapeMotionValuesFr = scrapeMotionValuesFromProps(props),\n        willChange = _scrapeMotionValuesFr.willChange,\n        initialMotionValues = _objectWithoutProperties(_scrapeMotionValuesFr, [\"willChange\"]);\n\n  for (const key in initialMotionValues) {\n    const value = initialMotionValues[key];\n\n    if (latestValues[key] !== undefined && isMotionValue(value)) {\n      value.set(latestValues[key], false);\n\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n      }\n    }\n  }\n  /**\n   * Update external values with initial values\n   */\n\n\n  if (props.values) {\n    for (const key in props.values) {\n      const value = props.values[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key]);\n      }\n    }\n  }\n  /**\n   * Determine what role this visual element should take in the variant tree.\n   */\n\n\n  const isControllingVariants$1 = isControllingVariants(props);\n  const isVariantNode$1 = isVariantNode(props);\n  const element = {\n    treeType,\n\n    /**\n     * This is a mirror of the internal instance prop, which keeps\n     * VisualElement type-compatible with React's RefObject.\n     */\n    current: null,\n\n    /**\n     * The depth of this visual element within the visual element tree.\n     */\n    depth: parent ? parent.depth + 1 : 0,\n    parent,\n    children: new Set(),\n\n    /**\n     *\n     */\n    presenceId,\n    shouldReduceMotion: null,\n\n    /**\n     * If this component is part of the variant tree, it should track\n     * any children that are also part of the tree. This is essentially\n     * a shadow tree to simplify logic around how to stagger over children.\n     */\n    variantChildren: isVariantNode$1 ? new Set() : undefined,\n\n    /**\n     * Whether this instance is visible. This can be changed imperatively\n     * by the projection tree, is analogous to CSS's visibility in that\n     * hidden elements should take up layout, and needs enacting by the configured\n     * render function.\n     */\n    isVisible: undefined,\n\n    /**\n     * Normally, if a component is controlled by a parent's variants, it can\n     * rely on that ancestor to trigger animations further down the tree.\n     * However, if a component is created after its parent is mounted, the parent\n     * won't trigger that mount animation so the child needs to.\n     *\n     * TODO: This might be better replaced with a method isParentMounted\n     */\n    manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n    /**\n     * This can be set by AnimatePresence to force components that mount\n     * at the same time as it to mount as if they have initial={false} set.\n     */\n    blockInitialAnimation,\n\n    /**\n     * Determine whether this component has mounted yet. This is mostly used\n     * by variant children to determine whether they need to trigger their\n     * own animations on mount.\n     */\n    isMounted: () => Boolean(instance),\n\n    mount(newInstance) {\n      isMounted = true;\n      instance = element.current = newInstance;\n\n      if (element.projection) {\n        element.projection.mount(newInstance);\n      }\n\n      if (isVariantNode$1 && parent && !isControllingVariants$1) {\n        removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n      }\n\n      values.forEach((value, key) => bindToMotionValue(key, value));\n\n      if (!hasReducedMotionListener.current) {\n        initPrefersReducedMotion();\n      }\n\n      element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n      parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n      element.setProps(props);\n    },\n\n    /**\n     *\n     */\n    unmount() {\n      var _a;\n\n      (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n      cancelSync.update(update);\n      cancelSync.render(render);\n      valueSubscriptions.forEach(remove => remove());\n      removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n      parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n      lifecycles.clearAllListeners();\n      instance = undefined;\n      isMounted = false;\n    },\n\n    loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n      const features = [];\n      /**\n       * If we're in development mode, check to make sure we're not rendering a motion component\n       * as a child of LazyMotion, as this will break the file-size benefits of using it.\n       */\n\n      if (env !== \"production\" && preloadedFeatures && isStrict) {\n        invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n      }\n\n      for (let i = 0; i < numFeatures; i++) {\n        const name = featureNames[i];\n        const _featureDefinitions$n = featureDefinitions[name],\n              isEnabled = _featureDefinitions$n.isEnabled,\n              Component = _featureDefinitions$n.Component;\n        /**\n         * It might be possible in the future to use this moment to\n         * dynamically request functionality. In initial tests this\n         * was producing a lot of duplication amongst bundles.\n         */\n\n        if (isEnabled(renderedProps) && Component) {\n          features.push(createElement(Component, {\n            key: name,\n            ...renderedProps,\n            visualElement: element\n          }));\n        }\n      }\n\n      if (!element.projection && ProjectionNodeConstructor) {\n        element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n        const layoutId = renderedProps.layoutId,\n              layout = renderedProps.layout,\n              drag = renderedProps.drag,\n              dragConstraints = renderedProps.dragConstraints,\n              layoutScroll = renderedProps.layoutScroll;\n        element.projection.setOptions({\n          layoutId,\n          layout,\n          alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n          visualElement: element,\n          scheduleRender: () => element.scheduleRender(),\n\n          /**\n           * TODO: Update options in an effect. This could be tricky as it'll be too late\n           * to update by the time layout animations run.\n           * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n           * ensuring it gets called if there's no potential layout animations.\n           *\n           */\n          animationType: typeof layout === \"string\" ? layout : \"both\",\n          initialPromotionConfig: initialLayoutGroupConfig,\n          layoutScroll\n        });\n      }\n\n      return features;\n    },\n\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n      var _a;\n\n      const closestVariantNode = element.getClosestVariantNode();\n\n      if (closestVariantNode) {\n        (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n        return () => closestVariantNode.variantChildren.delete(child);\n      }\n    },\n\n    sortNodePosition(other) {\n      /**\n       * If these nodes aren't even of the same type we can't compare their depth.\n       */\n      if (!sortNodePosition || treeType !== other.treeType) return 0;\n      return sortNodePosition(element.getInstance(), other.getInstance());\n    },\n\n    /**\n     * Returns the closest variant node in the tree starting from\n     * this visual element.\n     */\n    getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n\n    /**\n     * Expose the latest layoutId prop.\n     */\n    getLayoutId: () => props.layoutId,\n\n    /**\n     * Returns the current instance.\n     */\n    getInstance: () => instance,\n\n    /**\n     * Get/set the latest static values.\n     */\n    getStaticValue: key => latestValues[key],\n    setStaticValue: (key, value) => latestValues[key] = value,\n\n    /**\n     * Returns the latest motion value state. Currently only used to take\n     * a snapshot of the visual element - perhaps this can return the whole\n     * visual state\n     */\n    getLatestValues: () => latestValues,\n\n    /**\n     * Set the visiblity of the visual element. If it's changed, schedule\n     * a render to reflect these changes.\n     */\n    setVisibility(visibility) {\n      if (element.isVisible === visibility) return;\n      element.isVisible = visibility;\n      element.scheduleRender();\n    },\n\n    /**\n     * Make a target animatable by Popmotion. For instance, if we're\n     * trying to animate width from 100px to 100vw we need to measure 100vw\n     * in pixels to determine what we really need to animate to. This is also\n     * pluggable to support Framer's custom value types like Color,\n     * and CSS variables.\n     */\n    makeTargetAnimatable(target, canMutate = true) {\n      return makeTargetAnimatable(element, target, props, canMutate);\n    },\n\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n      return measureViewportBox(instance, props);\n    },\n\n    // Motion values ========================\n\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n      // Remove existing value if it exists\n      if (element.hasValue(key)) element.removeValue(key);\n      values.set(key, value);\n      latestValues[key] = value.get();\n      bindToMotionValue(key, value);\n    },\n\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n      var _a;\n\n      values.delete(key);\n      (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n      valueSubscriptions.delete(key);\n      delete latestValues[key];\n      removeValueFromRenderState(key, renderState);\n    },\n\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue: key => values.has(key),\n\n    /**\n     * Get a motion value for this key. If called with a default\n     * value, we'll create one if none exists.\n     */\n    getValue(key, defaultValue) {\n      if (props.values && props.values[key]) {\n        return props.values[key];\n      }\n\n      let value = values.get(key);\n\n      if (value === undefined && defaultValue !== undefined) {\n        value = motionValue(defaultValue);\n        element.addValue(key, value);\n      }\n\n      return value;\n    },\n\n    /**\n     * Iterate over our motion values.\n     */\n    forEachValue: callback => values.forEach(callback),\n\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue: key => latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options),\n\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n      baseTarget[key] = value;\n    },\n\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n      var _a;\n\n      const _props = props,\n            initial = _props.initial;\n      const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n      /**\n       * If this value still exists in the current initial variant, read that.\n       */\n\n      if (initial && valueFromInitial !== undefined) {\n        return valueFromInitial;\n      }\n      /**\n       * Alternatively, if this VisualElement config has defined a getBaseTarget\n       * so we can read the value from an alternative source, try that.\n       */\n\n\n      if (getBaseTarget) {\n        const target = getBaseTarget(props, key);\n        if (target !== undefined && !isMotionValue(target)) return target;\n      }\n      /**\n       * If the value was initially defined on initial, but it doesn't any more,\n       * return undefined. Otherwise return the value as initially read from the DOM.\n       */\n\n\n      return initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : baseTarget[key];\n    },\n\n    // Lifecyles ========================\n    ...lifecycles,\n\n    /**\n     * Build the renderer state based on the latest visual state.\n     */\n    build() {\n      triggerBuild();\n      return renderState;\n    },\n\n    /**\n     * Schedule a render on the next animation frame.\n     */\n    scheduleRender() {\n      sync.render(render, false, true);\n    },\n\n    /**\n     * Synchronously fire render. It's prefered that we batch renders but\n     * in many circumstances, like layout measurement, we need to run this\n     * synchronously. However in those instances other measures should be taken\n     * to batch reads/writes.\n     */\n    syncRender: render,\n\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    setProps(newProps) {\n      if (newProps.transformTemplate || props.transformTemplate) {\n        element.scheduleRender();\n      }\n\n      props = newProps;\n      lifecycles.updatePropListeners(newProps);\n      prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n    },\n\n    getProps: () => props,\n    // Variants ==============================\n\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant: name => {\n      var _a;\n\n      return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n    },\n\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition: () => props.transition,\n    getTransformPagePoint: () => {\n      return props.transformPagePoint;\n    },\n\n    /**\n     * Used by child variant nodes to get the closest ancestor variant props.\n     */\n    getVariantContext(startAtParent = false) {\n      if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n      if (!isControllingVariants$1) {\n        const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n        if (props.initial !== undefined) {\n          context.initial = props.initial;\n        }\n\n        return context;\n      }\n\n      const context = {};\n\n      for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = props[name];\n\n        if (isVariantLabel(prop) || prop === false) {\n          context[name] = prop;\n        }\n      }\n\n      return context;\n    }\n\n  };\n  return element;\n};\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":null,"metadata":{},"sourceType":"module"}