{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = require('tslib');\n\nvar index = require('../resize/index.cjs.js');\n\nvar info = require('./info.cjs.js');\n\nvar onScrollHandler = require('./on-scroll-handler.cjs.js');\n\nconst scrollListeners = new WeakMap();\nconst resizeListeners = new WeakMap();\nconst onScrollHandlers = new WeakMap();\n\nconst getEventTarget = element => element === document.documentElement ? window : element;\n\nfunction scroll(onScroll, _a = {}) {\n  var _a$container = _a.container,\n      container = _a$container === void 0 ? document.documentElement : _a$container,\n      options = tslib.__rest(_a, [\"container\"]);\n\n  let containerHandlers = onScrollHandlers.get(container);\n  /**\n   * Get the onScroll handlers for this container.\n   * If one isn't found, create a new one.\n   */\n\n  if (!containerHandlers) {\n    containerHandlers = new Set();\n    onScrollHandlers.set(container, containerHandlers);\n  }\n  /**\n   * Create a new onScroll handler for the provided callback.\n   */\n\n\n  const info$1 = info.createScrollInfo();\n  const containerHandler = onScrollHandler.createOnScrollHandler(container, onScroll, info$1, options);\n  containerHandlers.add(containerHandler);\n  /**\n   * Check if there's a scroll event listener for this container.\n   * If not, create one.\n   */\n\n  if (!scrollListeners.has(container)) {\n    const listener = () => {\n      const time = performance.now();\n\n      for (const handler of containerHandlers) handler.measure();\n\n      for (const handler of containerHandlers) handler.update(time);\n\n      for (const handler of containerHandlers) handler.notify();\n    };\n\n    scrollListeners.set(container, listener);\n    const target = getEventTarget(container);\n    window.addEventListener(\"resize\", listener, {\n      passive: true\n    });\n\n    if (container !== document.documentElement) {\n      resizeListeners.set(container, index.resize(container, listener));\n    }\n\n    target.addEventListener(\"scroll\", listener, {\n      passive: true\n    });\n  }\n\n  const listener = scrollListeners.get(container);\n  const onLoadProcesss = requestAnimationFrame(listener);\n  return () => {\n    var _a;\n\n    if (typeof onScroll !== \"function\") onScroll.stop();\n    cancelAnimationFrame(onLoadProcesss);\n    /**\n     * Check if we even have any handlers for this container.\n     */\n\n    const containerHandlers = onScrollHandlers.get(container);\n    if (!containerHandlers) return;\n    containerHandlers.delete(containerHandler);\n    if (containerHandlers.size) return;\n    /**\n     * If no more handlers, remove the scroll listener too.\n     */\n\n    const listener = scrollListeners.get(container);\n    scrollListeners.delete(container);\n\n    if (listener) {\n      getEventTarget(container).removeEventListener(\"scroll\", listener);\n      (_a = resizeListeners.get(container)) === null || _a === void 0 ? void 0 : _a();\n      window.removeEventListener(\"resize\", listener);\n    }\n  };\n}\n\nexports.scroll = scroll;","map":null,"metadata":{},"sourceType":"script"}